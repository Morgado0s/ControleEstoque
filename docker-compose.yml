services:
  # MySQL Database Container
  mysql:
    image: mysql:8.0
    container_name: inventory_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_EXTERNAL:-3306}:${DB_PORT_INTERNAL:-3306}"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend Container
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    container_name: inventory_api
    volumes:
      - ./api:/app
    environment:
      DB_HOST: mysql
      DB_PORT: ${DB_PORT_INTERNAL:-3306}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-1}
    ports:
      - "${API_PORT:-5001}:5000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Container
  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
    container_name: inventory_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_INTERNAL_PORT:-8080}"
    volumes:
      - ./app:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - inventory_network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local

networks:
  inventory_network:
    driver: bridge